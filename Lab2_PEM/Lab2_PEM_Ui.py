# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Lab2_PEM.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys, os
import Create_file_UI
import shutil
from Create_file_UI import Ui_Dialog
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QDialog, QMessageBox

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(892, 560)
        self.AddFileButton = QtWidgets.QPushButton(Dialog)
        self.AddFileButton.setGeometry(QtCore.QRect(280, 500, 93, 28))
        self.AddFileButton.setObjectName("AddFileButton")
        self.textEdit = QtWidgets.QTextEdit(Dialog)
        self.textEdit.setGeometry(QtCore.QRect(30, 80, 811, 401))
        self.textEdit.setObjectName("textEdit")
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(32, 30, 811, 22))
        self.lineEdit.setObjectName("lineEdit")
        self.FindFileButton = QtWidgets.QPushButton(Dialog)
        self.FindFileButton.setGeometry(QtCore.QRect(180, 500, 93, 28))
        self.FindFileButton.setObjectName("FindFileButton")
        self.DeleteFileButton = QtWidgets.QPushButton(Dialog)
        self.DeleteFileButton.setGeometry(QtCore.QRect(380, 500, 93, 28))
        self.DeleteFileButton.setObjectName("DeleteFileButton")
        self.FindFolderButton = QtWidgets.QPushButton(Dialog)
        self.FindFolderButton.setGeometry(QtCore.QRect(480, 500, 93, 28))
        self.FindFolderButton.setObjectName("FindFolderButton")
        self.DeleteFolderButton = QtWidgets.QPushButton(Dialog)
        self.DeleteFolderButton.setGeometry(QtCore.QRect(580, 500, 93, 28))
        self.DeleteFolderButton.setObjectName("DeleteFolderButton")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.AddFileButton.setText(_translate("Dialog", "Add file"))
        self.FindFileButton.setText(_translate("Dialog", "Find file"))
        self.DeleteFileButton.setText(_translate("Dialog", "Delete file"))
        self.FindFolderButton.setText(_translate("Dialog", "Find folder"))
        self.DeleteFolderButton.setText(_translate("Dialog", "Delete folder"))

    def open_dialog(self):
        # Открываем диалоговое окно для выбора файла
        file_dialog = QFileDialog(self)
        file_dialog.setNameFilter("Text files (*.txt)")
        file_dialog.setViewMode(QFileDialog.List)
        file_dialog.setFileMode(QFileDialog.ExistingFiles)

        if file_dialog.exec_():
            selected_files = file_dialog.selectedFiles()
            file_path = selected_files[0] if selected_files else ""
            file_size = os.path.getsize(file_path)
            with open(file_path, "r", encoding='utf-8') as file:
                file_text = file.read()
            file_name = os.path.basename(file_path)
            self.lineEdit.setText(f"{file_path}")
            self.textEdit.setText(f"File: {file_path}\nFile name: {file_name}\nSize: {file_size} bytes\nText:\n{file_text}")

    def add_file(self):
        self.create_file = Create_file_UI.MyDialog()
        self.create_file.show()

    def delete_file(self):
        file_path = self.lineEdit.text()
        if os.path.exists(file_path):  # Проверяем существование файла
            os.remove(file_path)  # Удаляем файл
            self.lineEdit.clear()  # Очищаем поле пути
            self.textEdit.clear()
            print("File deleted successfully.")
        else:
            self.open_dialog() 
               
    def select_folder(self):
        folder_path = QFileDialog.getExistingDirectory(self, "Select Folder", "")
        if folder_path:
            self.lineEdit.setText(folder_path)
        
    def delete_folder(self):
        folder_path = self.lineEdit.text()
        if not folder_path:
            QMessageBox.warning(self, "Warning", "Please select a folder first.")
            return

        try:
            shutil.rmtree(folder_path)
            QMessageBox.information(self, "Success", "Folder successfully deleted.")
            self.lineEdit.clear()
        except OSError as e:
            QMessageBox.critical(self, "Error", f"Failed to delete folder: {e.strerror}")  

class MyDialog(QDialog, Ui_Dialog):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.FindFileButton.clicked.connect(self.open_dialog)  # Подключаем обработчик события к кнопке
        self.AddFileButton.clicked.connect(self.add_file)
        self.DeleteFileButton.clicked.connect(self.delete_file)
        self.FindFolderButton.clicked.connect(self.select_folder)
        self.DeleteFolderButton.clicked.connect(self.delete_folder)